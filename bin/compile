#! /usr/bin/ruby
# encoding: utf-8
$LANG = "UTF-8"

# Catch interrupts received before app is loaded.
interrupted = false
trap('INT') { interrupted = true }

dir = File.dirname(File.dirname(__FILE__))
$LOAD_PATH.unshift dir unless $LOAD_PATH.include?(dir)
$LOAD_PATH.unshift File.join(dir, 'lib')

require "hammer/hammer"
require 'hammer/build'

@build = Hammer::Build.new(:cache_directory   => ARGV[0],
                          :input_directory => ARGV[1],
                          :output_directory  => ARGV[2],
                          :optimized   => ARGV.include?('PRODUCTION'))

trap('INT', 'DEFAULT')

@start = Time.now

# Pause to prevent the UI from returning too quickly and wreaking havoc with
# FSEvents.
def not_too_fast(start, minimum_duration = 0.5)
  duration = Time.now - start
  sleep minimum_duration - duration if duration < minimum_duration
end

def run
  results = @build.compile()
  not_too_fast(@start)
  
  template = Hammer::HTMLTemplate
  template = Hammer::CommandLineTemplate if ARGV.include? 'DEBUG'

  puts template.new(results)
  exit @build.error ? 1 : 0
end

if ARGV.include?('PRELOAD') and !interrupted
  @build.wait { |project, app_template| run() }
else
  run()
end
